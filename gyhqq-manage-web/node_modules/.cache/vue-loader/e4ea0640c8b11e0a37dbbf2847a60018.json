{"remainingRequest":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\components\\tree\\Tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\components\\tree\\Tree.vue","mtime":1566198667880},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1566198634345},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1566198662963},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1566198662436}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TreeItem from './TreeItem';\n\nexport default {\n  name: \"vTree\",\n  props: {\n    url: String,\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    treeData:{\n      type:Array\n    }\n  },\n  data() {\n    return {\n      db: [],\n      nodes:{\n        opened:null,\n        selected:{isSelected:false}\n      }\n    }\n  },\n  components: {\n    TreeItem\n  },\n  created() {\n    if(this.treeData && this.treeData.length > 0){\n      this.db = this.treeData;\n      return;\n    }\n    this.getData();\n  },\n  methods: {\n    getData() {\n      this.$http.get(this.url, {params: {pid: 0}}).then(resp => {\n        this.db = resp.data;\n        this.db.forEach(n => n['path'] = [n.name])\n      })\n    },\n    handleAdd(node) {\n      this.$emit(\"handleAdd\", this.copyNodeInfo(node));\n    },\n    handleEdit(id, name) {\n      this.$emit(\"handleEdit\", id, name)\n    },\n    handleDelete(id) {\n      this.deleteById(id, this.db);\n      this.$emit(\"handleDelete\", id);\n    },\n    handleClick(node){\n      this.$emit(\"handleClick\", this.copyNodeInfo(node))\n    },\n    // 根据id删除\n    deleteById(id, arr) {\n      let src = arr || this.db;\n      for (let i in src) {\n        let d = src[i];\n        if (d.id === id) {\n          src.splice(i, 1)\n          return;\n        }\n        if (d.children && d.children.length > 0) {\n          this.deleteById(id, d.children)\n        }\n      }\n    },\n    copyNodeInfo(node){\n      const o = {};\n      for(let i in node){\n        o[i] = node[i];\n      }\n      return o;\n    }\n  },\n  watch: {}\n}\n",{"version":3,"sources":["Tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tree.vue","sourceRoot":"src/components/tree","sourcesContent":["<template>\r\n  <v-list class=\"pt-0 pb-0\" dense>\r\n    <TreeItem\r\n      class=\"item\" :model=\"model\" v-for=\"(model, index) in db\" :key=\"index\"\r\n      :url=\"url\"\r\n      :isEdit=\"isEdit\"\r\n      :nodes=\"nodes\"\r\n      @handleAdd=\"handleAdd\"\r\n      @handleEdit=\"handleEdit\"\r\n      @handleDelete=\"handleDelete\"\r\n      @handleClick=\"handleClick\"\r\n    />\r\n  </v-list>\r\n</template>\r\n\r\n<script>\r\n  import TreeItem from './TreeItem';\r\n\r\n  export default {\r\n    name: \"vTree\",\r\n    props: {\r\n      url: String,\r\n      isEdit: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      treeData:{\r\n        type:Array\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        db: [],\r\n        nodes:{\r\n          opened:null,\r\n          selected:{isSelected:false}\r\n        }\r\n      }\r\n    },\r\n    components: {\r\n      TreeItem\r\n    },\r\n    created() {\r\n      if(this.treeData && this.treeData.length > 0){\r\n        this.db = this.treeData;\r\n        return;\r\n      }\r\n      this.getData();\r\n    },\r\n    methods: {\r\n      getData() {\r\n        this.$http.get(this.url, {params: {pid: 0}}).then(resp => {\r\n          this.db = resp.data;\r\n          this.db.forEach(n => n['path'] = [n.name])\r\n        })\r\n      },\r\n      handleAdd(node) {\r\n        this.$emit(\"handleAdd\", this.copyNodeInfo(node));\r\n      },\r\n      handleEdit(id, name) {\r\n        this.$emit(\"handleEdit\", id, name)\r\n      },\r\n      handleDelete(id) {\r\n        this.deleteById(id, this.db);\r\n        this.$emit(\"handleDelete\", id);\r\n      },\r\n      handleClick(node){\r\n        this.$emit(\"handleClick\", this.copyNodeInfo(node))\r\n      },\r\n      // 根据id删除\r\n      deleteById(id, arr) {\r\n        let src = arr || this.db;\r\n        for (let i in src) {\r\n          let d = src[i];\r\n          if (d.id === id) {\r\n            src.splice(i, 1)\r\n            return;\r\n          }\r\n          if (d.children && d.children.length > 0) {\r\n            this.deleteById(id, d.children)\r\n          }\r\n        }\r\n      },\r\n      copyNodeInfo(node){\r\n        const o = {};\r\n        for(let i in node){\r\n          o[i] = node[i];\r\n        }\r\n        return o;\r\n      }\r\n    },\r\n    watch: {}\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .item {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n"]}]}
{"remainingRequest":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\components\\cascader\\Cascader.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\components\\cascader\\Cascader.vue","mtime":1566198667873},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1566198634345},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1566198662963},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1566198662436}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {Cascader} from 'iview'\nimport 'iview/dist/styles/iview.css';\n\nexport default {\n  name: \"vCascader\",\n  components: {\n    cas: Cascader\n  },\n  props: {\n    value: {},\n    label: {\n      type: String\n    },\n    url: {\n      type: String\n    },\n    itemText: {\n      type: String,\n      default: 'name'\n    },\n    itemValue: {\n      type: String,\n      default: 'id'\n    },\n    children: {\n      type: String,\n      default: 'children'\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: false\n    },\n    required:{\n      type: Boolean,\n      default: false\n    },\n    rules:{\n      type:Array,\n    }\n  },\n  data() {\n    return {\n      options: [],\n      selected: [],\n      defaultRules:[]\n    }\n  },\n  methods: {\n    handleChange(value, selectedData) {\n      // 获取最后一级\n      const option = selectedData[selectedData.length - 1];\n      // 如果是多选，则默认只保存最后一级选项\n      if (this.multiple) {\n        // 将最后一级保存到selected中\n        if (this.selected.findIndex(o => o.value === option.value) < 0) {\n          this.selected.push(option);\n        }\n        // 返回已选中的值\n        this.$emit(\"input\", this.transfer(this.selected));\n      } else {\n        // 单选，则需要判断是否需要显示所有级别\n        if (this.showAllLevels) {\n          // 显示所有级别,将各级别label进行拼接\n          this.selected = [option.__label];\n          // 返回id数组\n          this.$emit(\"input\", this.transfer(selectedData));\n        } else {\n          // 只显示最后一级\n          this.selected = [option.label];\n          // 返回\n          this.$emit(\"input\", this.transfer([option])[0]);\n        }\n      }\n    },\n    loadOption(item, callback) {// 延迟加载次级选项\n      item.loading = true;\n      this.loadData(item.value).then(data => {\n        item.children = data;\n        item.loading = false;\n        callback();\n      }).catch(() => {\n        item.loading = false;\n        callback();\n      })\n    },\n    loadData(pid) {// 从指定的url地址加载数据，并格式化\n      return new Promise((resolve) => {\n        this.$http.get(this.url, {\n          params: {\n            pid: pid\n          }\n        }).then(resp => {\n          const data = [];\n          for (let d of resp.data) {\n            const node = {\n              value: d[this.itemValue],\n              label: d[this.itemText]\n            }\n            if (d.isParent) {\n              node['children'] = [];\n              node['loading'] = false;\n            }\n            data.push(node)\n          }\n          resolve(data);\n        })\n      })\n    },\n    remove(item) {\n      this.selected = this.selected.filter(o => o.value !== item.value)\n      this.$emit(\"input\", this.transfer(this.selected))\n    },\n    transfer(arr) {\n      return arr.map(({label, value}) => {\n        const obj = {};\n        obj[this.itemText] = label;\n        obj[this.itemValue] = value;\n        return obj;\n      })\n    },\n    validate(){\n      if(this.required){\n        this.$refs.form.validate();\n      }\n    }\n  },\n  created() {\n    this.loadData(0).then(data => {\n      this.options = data;\n    })\n    if(this.required){\n      this.defaultRules.push(v => v.length > 0 || this.label + \"不能为空\");\n    }\n    if(this.rules){\n      this.rules.forEach(r => this.defaultRules.push(r));\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(val) {\n        if(!val){\n          this.selected = [];\n          return;\n        }\n        if(val && this.showAllLevels && !this.multiple){\n          this.selected = [val.map(o => o[this.itemText]).join(\"/\")]\n        } else if (this.multiple && val) {\n          this.selected = val.map(o => {\n            return {\n              label: o[this.itemText],\n              value: o[this.itemValue]\n            }\n          })\n        } else{\n          this.selected = [val[this.itemText]]\n        }\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Cascader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"Cascader.vue","sourceRoot":"src/components/cascader","sourcesContent":["<template>\r\n  <cas :data=\"options\" @on-change=\"handleChange\" :loadData=\"loadOption\" transfer>\r\n    <v-combobox multiple :label=\"label\" chips clearable v-model=\"selected\" :required=\"required\"\r\n      :rules=\"defaultRules\">\r\n      <template v-slot:selection=\"{ item, parent, selected }\">\r\n        <v-chip @click.stop=\"\" v-if=\"multiple\" close @input=\"remove(item)\" small outline color=\"green\">\r\n          {{ item.label}}&nbsp;\r\n        </v-chip>\r\n        <v-chip @click.stop=\"\" v-else small>{{ item}}</v-chip>\r\n      </template>\r\n    </v-combobox>\r\n  </cas>\r\n</template>\r\n\r\n<script>\r\n  import {Cascader} from 'iview'\r\n  import 'iview/dist/styles/iview.css';\r\n\r\n  export default {\r\n    name: \"vCascader\",\r\n    components: {\r\n      cas: Cascader\r\n    },\r\n    props: {\r\n      value: {},\r\n      label: {\r\n        type: String\r\n      },\r\n      url: {\r\n        type: String\r\n      },\r\n      itemText: {\r\n        type: String,\r\n        default: 'name'\r\n      },\r\n      itemValue: {\r\n        type: String,\r\n        default: 'id'\r\n      },\r\n      children: {\r\n        type: String,\r\n        default: 'children'\r\n      },\r\n      multiple: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      showAllLevels: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      required:{\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      rules:{\r\n        type:Array,\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        options: [],\r\n        selected: [],\r\n        defaultRules:[]\r\n      }\r\n    },\r\n    methods: {\r\n      handleChange(value, selectedData) {\r\n        // 获取最后一级\r\n        const option = selectedData[selectedData.length - 1];\r\n        // 如果是多选，则默认只保存最后一级选项\r\n        if (this.multiple) {\r\n          // 将最后一级保存到selected中\r\n          if (this.selected.findIndex(o => o.value === option.value) < 0) {\r\n            this.selected.push(option);\r\n          }\r\n          // 返回已选中的值\r\n          this.$emit(\"input\", this.transfer(this.selected));\r\n        } else {\r\n          // 单选，则需要判断是否需要显示所有级别\r\n          if (this.showAllLevels) {\r\n            // 显示所有级别,将各级别label进行拼接\r\n            this.selected = [option.__label];\r\n            // 返回id数组\r\n            this.$emit(\"input\", this.transfer(selectedData));\r\n          } else {\r\n            // 只显示最后一级\r\n            this.selected = [option.label];\r\n            // 返回\r\n            this.$emit(\"input\", this.transfer([option])[0]);\r\n          }\r\n        }\r\n      },\r\n      loadOption(item, callback) {// 延迟加载次级选项\r\n        item.loading = true;\r\n        this.loadData(item.value).then(data => {\r\n          item.children = data;\r\n          item.loading = false;\r\n          callback();\r\n        }).catch(() => {\r\n          item.loading = false;\r\n          callback();\r\n        })\r\n      },\r\n      loadData(pid) {// 从指定的url地址加载数据，并格式化\r\n        return new Promise((resolve) => {\r\n          this.$http.get(this.url, {\r\n            params: {\r\n              pid: pid\r\n            }\r\n          }).then(resp => {\r\n            const data = [];\r\n            for (let d of resp.data) {\r\n              const node = {\r\n                value: d[this.itemValue],\r\n                label: d[this.itemText]\r\n              }\r\n              if (d.isParent) {\r\n                node['children'] = [];\r\n                node['loading'] = false;\r\n              }\r\n              data.push(node)\r\n            }\r\n            resolve(data);\r\n          })\r\n        })\r\n      },\r\n      remove(item) {\r\n        this.selected = this.selected.filter(o => o.value !== item.value)\r\n        this.$emit(\"input\", this.transfer(this.selected))\r\n      },\r\n      transfer(arr) {\r\n        return arr.map(({label, value}) => {\r\n          const obj = {};\r\n          obj[this.itemText] = label;\r\n          obj[this.itemValue] = value;\r\n          return obj;\r\n        })\r\n      },\r\n      validate(){\r\n        if(this.required){\r\n          this.$refs.form.validate();\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      this.loadData(0).then(data => {\r\n        this.options = data;\r\n      })\r\n      if(this.required){\r\n        this.defaultRules.push(v => v.length > 0 || this.label + \"不能为空\");\r\n      }\r\n      if(this.rules){\r\n        this.rules.forEach(r => this.defaultRules.push(r));\r\n      }\r\n    },\r\n    watch: {\r\n      value: {\r\n        deep: true,\r\n        handler(val) {\r\n          if(!val){\r\n            this.selected = [];\r\n            return;\r\n          }\r\n          if(val && this.showAllLevels && !this.multiple){\r\n            this.selected = [val.map(o => o[this.itemText]).join(\"/\")]\r\n          } else if (this.multiple && val) {\r\n            this.selected = val.map(o => {\r\n              return {\r\n                label: o[this.itemText],\r\n                value: o[this.itemValue]\r\n              }\r\n            })\r\n          } else{\r\n            this.selected = [val[this.itemText]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .ivu-cascader-menu-item {\r\n    font-size: 14px;\r\n  }\r\n\r\n</style>\r\n"]}]}
{"remainingRequest":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\views\\item\\Goods.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\src\\views\\item\\Goods.vue","mtime":1566198667902},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1566198634345},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1566198662963},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566198635392},{"path":"C:\\Projects\\IDEA\\hobby\\store\\gyhqq-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1566198662436}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 导入自定义的表单组件\nimport GoodsForm from './GoodsForm'\n\nexport default {\n  name: \"goods\",\n  data() {\n    return {\n      saleable: true, // 上架还是下架\n      search: '', // 搜索过滤字段\n      totalGoods: 0, // 总条数\n      goodsList: [], // 当前页品牌数据\n      loading: true, // 是否在加载中\n      pagination: {}, // 分页信息\n      headers: [\n        {text: 'id', align: 'center', sortable: false, value: 'id'},\n        {text: '商品名称', align: 'center', sortable: false, value: 'name'},\n        {text: '商品分类', align: 'center', sortable: false, value: 'categoryName'},\n        {text: '品牌', align: 'center', value: 'brandName', sortable: false,},\n        {text: '操作', align: 'center', sortable: false}\n      ],\n      show: false,// 控制对话框的显示\n      oldGoods: {}, // 即将被编辑的商品信息\n      isEdit: false, // 是否是编辑\n      step: 1, // 子组件中的步骤线索引，默认为1\n    }\n  },\n  mounted() { // 渲染后执行\n    // 查询数据\n    this.getDataFromServer();\n  },\n  watch: {\n    pagination: { // 监视pagination属性的变化\n      deep: true, // deep为true，会监视pagination的属性及属性中的对象属性变化\n      handler() {\n        // 变化后的回调函数，这里我们再次调用getDataFromServer即可\n        this.getDataFromServer();\n      }\n    },\n    saleable(){\n      this.getDataFromServer();\n    }\n  },\n  methods: {\n    getDataFromServer() { // 从服务的加载数的方法。\n      // 发起请求\n      this.$http.get(\"/item/spu/page\", {\n        params: {\n          key: this.search, // 搜索条件\n          saleable: this.saleable === 0 ? null : this.saleable, // 上下架\n          page: this.pagination.page,// 当前页\n          rows: this.pagination.rowsPerPage,// 每页大小\n        }\n      }).then(resp => { // 这里使用箭头函数\n        this.goodsList = resp.data.items;\n        this.totalGoods = resp.data.total;\n        // 完成赋值后，把加载状态赋值为false\n        this.loading = false;\n      }).catch(() => {\n        this.goodsList = [];\n        this.totalGoods = 0;\n        // 完成赋值后，把加载状态赋值为false\n        this.loading = false;\n      })\n    },\n    addGoods() {\n      // 修改标记\n      this.isEdit = false;\n      // 控制弹窗可见：\n      this.show = true;\n      // 把oldBrand变为null\n      this.oldGoods = {};\n    },\n    async editGoods(oldGoods) {\n      if (oldGoods.saleable) {\n        // 如果是上架商品，则不允许修改\n        this.$message.error(\"不能修改上架商品，请先下架！\");\n        return;\n      }\n      // 发起请求，查询商品详情和skus\n      oldGoods.spuDetail = await this.$http.loadData(\"/item/spu/detail?id=\" + oldGoods.id);\n      oldGoods.skus = await this.$http.loadData(\"/item/sku/of/spu?id=\" + oldGoods.id);\n      // 修改标记\n      this.isEdit = true;\n      // 控制弹窗可见：\n      this.show = true;\n      // 获取要编辑的goods\n      this.oldGoods = oldGoods;\n    },\n    closeWindow() {\n      console.log(1)\n      // 重新加载数据\n      this.getDataFromServer();\n      // 关闭窗口\n      this.show = false;\n      // 将步骤调整到1\n      this.step = 1;\n    },\n    previous() {\n      if (this.step > 1) {\n        this.step--\n      }\n    },\n    next() {\n      if (this.step < 4 && this.$refs.goodsForm.$refs.basic.validate()) {\n        this.step++\n      }\n    },\n    updateSaleable(id, saleable) {\n      this.$http.put(\"/item/spu/saleable\", this.$qs.stringify({id, saleable}))\n        .then(resp => {\n          this.getDataFromServer();\n          this.$message.success(\"操作成功！\");\n        })\n        .catch(error => {\n          this.$message.error(\"操作失败，请重试！\");\n        })\n    },\n    goodsDetail(id){\n      this.$message.info(\"同学，自己也动手写点东西吧。\");\n    }\n  },\n  components: {\n    GoodsForm\n  }\n}\n",{"version":3,"sources":["Goods.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Goods.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n  <v-card>\r\n    <v-toolbar class=\"elevation-0\">\r\n      <v-btn color=\"primary\" @click=\"addGoods\">新增商品</v-btn>\r\n      <v-spacer/>\r\n      <v-flex xs3>\r\n        状态：\r\n        <v-btn-toggle mandatory v-model.lazy=\"saleable\">\r\n          <v-btn>\r\n            全部\r\n          </v-btn>\r\n          <v-btn :value=\"true\">\r\n            上架\r\n          </v-btn>\r\n          <v-btn :value=\"false\">\r\n            下架\r\n          </v-btn>\r\n        </v-btn-toggle>\r\n      </v-flex>\r\n      <v-flex xs3>\r\n        <v-text-field\r\n            append-icon=\"search\"\r\n            label=\"搜索\"\r\n            single-line\r\n            hide-details\r\n            v-model=\"search\"\r\n            @click:append=\"getDataFromServer\"\r\n        />\r\n      </v-flex>\r\n    </v-toolbar>\r\n    <v-divider/>\r\n    <v-data-table\r\n        :headers=\"headers\"\r\n        :items=\"goodsList\"\r\n        :pagination.sync=\"pagination\"\r\n        :total-items=\"totalGoods\"\r\n        :loading=\"loading\"\r\n        class=\"elevation-1\"\r\n    >\r\n      <template slot=\"items\" slot-scope=\"props\">\r\n        <td class=\"text-xs-center\">{{ props.item.id }}</td>\r\n        <td class=\"text-xs-center\">{{ props.item.name }}</td>\r\n        <td class=\"text-xs-center\">{{props.item.categoryName}}</td>\r\n        <td class=\"text-xs-center\">{{ props.item.brandName }}</td>\r\n        <td class=\"justify-center layout px-0\">\r\n          <v-tooltip left>\r\n            <v-btn slot=\"activator\" icon @click=\"goodsDetail(props.item.id)\">\r\n              <i class=\"el-icon-search\"/>\r\n            </v-btn>\r\n            <span> 查看商品</span>\r\n          </v-tooltip>\r\n          <v-tooltip left>\r\n            <v-btn slot=\"activator\" icon @click=\"editGoods(props.item)\">\r\n              <i class=\"el-icon-edit\"/>\r\n            </v-btn>\r\n            <span> 修改商品</span>\r\n          </v-tooltip>\r\n          <v-tooltip left>\r\n            <v-btn icon slot=\"activator\">\r\n              <i class=\"el-icon-delete\"/>\r\n            </v-btn>\r\n            <span> 删除商品</span>\r\n          </v-tooltip>\r\n          <v-tooltip left>\r\n            <v-btn slot=\"activator\" icon @click=\"updateSaleable(props.item.id, !props.item.saleable)\">\r\n              <i class=\"el-icon-upload2\" v-if=\"!props.item.saleable\"/>\r\n              <i class=\"el-icon-download\" v-else/>\r\n            </v-btn>\r\n            <span v-if=\"!props.item.saleable\"> 上架商品</span>\r\n            <span v-else> 下架商品</span>\r\n          </v-tooltip>\r\n        </td>\r\n      </template>\r\n    </v-data-table>\r\n    <!--弹出的对话框-->\r\n    <v-dialog max-width=\"800\" v-model=\"show\" persistent scrollable>\r\n      <v-card>\r\n        <!--对话框的标题-->\r\n        <v-toolbar dense dark color=\"primary\">\r\n          <v-toolbar-title>{{isEdit ? '修改' : '新增'}}商品</v-toolbar-title>\r\n          <v-spacer/>\r\n          <!--关闭窗口的按钮-->\r\n          <v-btn icon @click=\"closeWindow\">\r\n            <v-icon>close</v-icon>\r\n          </v-btn>\r\n        </v-toolbar>\r\n        <!--对话框的内容，表单-->\r\n        <v-card-text class=\"px-3\" style=\"height: 600px\">\r\n          <goods-form :oldGoods=\"oldGoods\" :step=\"step\" @close=\"closeWindow\" :is-edit=\"isEdit\" ref=\"goodsForm\"/>\r\n        </v-card-text>\r\n        <!--底部按钮，用来操作步骤线-->\r\n        <v-card-actions class=\"elevation-10\">\r\n          <v-flex class=\"xs3 mx-auto\">\r\n            <v-btn @click=\"previous\" color=\"primary\" :disabled=\"step === 1\">上一步</v-btn>\r\n            <v-btn @click=\"next\" color=\"primary\" :disabled=\"step === 4\">下一步</v-btn>\r\n          </v-flex>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\n  // 导入自定义的表单组件\r\n  import GoodsForm from './GoodsForm'\r\n\r\n  export default {\r\n    name: \"goods\",\r\n    data() {\r\n      return {\r\n        saleable: true, // 上架还是下架\r\n        search: '', // 搜索过滤字段\r\n        totalGoods: 0, // 总条数\r\n        goodsList: [], // 当前页品牌数据\r\n        loading: true, // 是否在加载中\r\n        pagination: {}, // 分页信息\r\n        headers: [\r\n          {text: 'id', align: 'center', sortable: false, value: 'id'},\r\n          {text: '商品名称', align: 'center', sortable: false, value: 'name'},\r\n          {text: '商品分类', align: 'center', sortable: false, value: 'categoryName'},\r\n          {text: '品牌', align: 'center', value: 'brandName', sortable: false,},\r\n          {text: '操作', align: 'center', sortable: false}\r\n        ],\r\n        show: false,// 控制对话框的显示\r\n        oldGoods: {}, // 即将被编辑的商品信息\r\n        isEdit: false, // 是否是编辑\r\n        step: 1, // 子组件中的步骤线索引，默认为1\r\n      }\r\n    },\r\n    mounted() { // 渲染后执行\r\n      // 查询数据\r\n      this.getDataFromServer();\r\n    },\r\n    watch: {\r\n      pagination: { // 监视pagination属性的变化\r\n        deep: true, // deep为true，会监视pagination的属性及属性中的对象属性变化\r\n        handler() {\r\n          // 变化后的回调函数，这里我们再次调用getDataFromServer即可\r\n          this.getDataFromServer();\r\n        }\r\n      },\r\n      saleable(){\r\n        this.getDataFromServer();\r\n      }\r\n    },\r\n    methods: {\r\n      getDataFromServer() { // 从服务的加载数的方法。\r\n        // 发起请求\r\n        this.$http.get(\"/item/spu/page\", {\r\n          params: {\r\n            key: this.search, // 搜索条件\r\n            saleable: this.saleable === 0 ? null : this.saleable, // 上下架\r\n            page: this.pagination.page,// 当前页\r\n            rows: this.pagination.rowsPerPage,// 每页大小\r\n          }\r\n        }).then(resp => { // 这里使用箭头函数\r\n          this.goodsList = resp.data.items;\r\n          this.totalGoods = resp.data.total;\r\n          // 完成赋值后，把加载状态赋值为false\r\n          this.loading = false;\r\n        }).catch(() => {\r\n          this.goodsList = [];\r\n          this.totalGoods = 0;\r\n          // 完成赋值后，把加载状态赋值为false\r\n          this.loading = false;\r\n        })\r\n      },\r\n      addGoods() {\r\n        // 修改标记\r\n        this.isEdit = false;\r\n        // 控制弹窗可见：\r\n        this.show = true;\r\n        // 把oldBrand变为null\r\n        this.oldGoods = {};\r\n      },\r\n      async editGoods(oldGoods) {\r\n        if (oldGoods.saleable) {\r\n          // 如果是上架商品，则不允许修改\r\n          this.$message.error(\"不能修改上架商品，请先下架！\");\r\n          return;\r\n        }\r\n        // 发起请求，查询商品详情和skus\r\n        oldGoods.spuDetail = await this.$http.loadData(\"/item/spu/detail?id=\" + oldGoods.id);\r\n        oldGoods.skus = await this.$http.loadData(\"/item/sku/of/spu?id=\" + oldGoods.id);\r\n        // 修改标记\r\n        this.isEdit = true;\r\n        // 控制弹窗可见：\r\n        this.show = true;\r\n        // 获取要编辑的goods\r\n        this.oldGoods = oldGoods;\r\n      },\r\n      closeWindow() {\r\n        console.log(1)\r\n        // 重新加载数据\r\n        this.getDataFromServer();\r\n        // 关闭窗口\r\n        this.show = false;\r\n        // 将步骤调整到1\r\n        this.step = 1;\r\n      },\r\n      previous() {\r\n        if (this.step > 1) {\r\n          this.step--\r\n        }\r\n      },\r\n      next() {\r\n        if (this.step < 4 && this.$refs.goodsForm.$refs.basic.validate()) {\r\n          this.step++\r\n        }\r\n      },\r\n      updateSaleable(id, saleable) {\r\n        this.$http.put(\"/item/spu/saleable\", this.$qs.stringify({id, saleable}))\r\n          .then(resp => {\r\n            this.getDataFromServer();\r\n            this.$message.success(\"操作成功！\");\r\n          })\r\n          .catch(error => {\r\n            this.$message.error(\"操作失败，请重试！\");\r\n          })\r\n      },\r\n      goodsDetail(id){\r\n        this.$message.info(\"同学，自己也动手写点东西吧。\");\r\n      }\r\n    },\r\n    components: {\r\n      GoodsForm\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}